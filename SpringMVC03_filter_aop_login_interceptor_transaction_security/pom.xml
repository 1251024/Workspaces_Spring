<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion> <!-- maven의 pom.xml의 모델 버전이다. -->
	<groupId>com.mvc</groupId> <!-- 프로젝트를 생성한 조직 또는 그룹명으로 보통, URL의 역순으로 지정 -->
	<artifactId>upgrade</artifactId><!-- 프로젝트에서 생성되는 기본 아티팩트의 고유 이름 -->
	<name>SpringMVC03</name><!-- 프로젝트명 -->
	<packaging>war</packaging><!-- 패키지 유형 -->
	<version>1.0.0-BUILD-SNAPSHOT</version>
	<properties>
		<java-version>1.6</java-version><!-- 프로퍼티의 javaversin은 버전 변수명 -->
		<org.springframework-version>3.1.1.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
	<dependencies><!-- dependencies: 의존라이브러리 정보 -->
		<!-- 
		Maven이란 자바용 프로젝트 관리 도구 project object model(POM) XML 문서를 통해 해당 프로젝트 
		라이브러리를 통합 관리하는 프레임워크 기존처럼 jar파일을 개발자가 직접 다운로드 받아 추가할 필요없음. 웹저장소(기본저장소인 Central 
		Repository든, 사설 저장소든)에서 원하는 라이브러리, 버젼정보를 지정하면, 메이븐이 관리함. 사용할 라이브러리의 로컬저장소(내컴퓨터)를 
		명시적으로 관리할 것임. 
			-->
		<!-- 여기 아니면 밑에 추가 -->

		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version><!-- 해당 변수명으로 버전을 정하겠다. 
				버전 충돌을 막기위해, 그버전 땡겨오게 하는것으로 쉽게 바꿀수 있다. -->
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId><!-- AOP작업을 수행하기 위해 필요한 의존(런타임) -->
			<version>${org.aspectj-version}</version>
		</dependency>

		<!-- Logging : Log 처리할 때 사용(log:기록) -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject --><!-- @autowired와 비슷, inject 사용하기 위함 -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>

		<!-- Servlet --><!-- DispatcherServlet(프론트 컨트롤러) 사용하기 위한 설정 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId><!-- 서블릿 -->
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId><!-- jsp -->
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId><!-- jstl -->
			<version>1.2</version>
		</dependency>

		<!-- Test -->
		<dependency>
			<groupId>junit</groupId><!-- junit : TDD(Test Driven Developement : 테스트 
				주도 개발) 자바관련 테스트 도구 -->
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency>

		<!-- 추가 -->
		<!-- 1. ojdbc6 -->
		<!-- mvn repository에서 oracle » ojdbc6 에서 카피하고 dependencies 밖에 repositories에 
			datanucleus랑 url을 추가해줘야함 또는 maven central repository에서 ojdbc » ojdbc6 등 다른 
			거 써도 되는데 기본적으로 메이븐이 가지고있는 저장소에 없어서 가져오는 경로는 다 다르니까 상황에따라 가져오기 usages가장 높은거 
			쓰는게 가장 안정적임.. -->
		<!-- https://mvnrepository.com/artifact/oracle/ojdbc6 -->
		<dependency>
			<groupId>oracle</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>11.2.0.3</version>
		</dependency>

		<!-- 2. mybatis -->
		<!-- org.mybatis » mybatis에서 최신버전카피 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.5.6</version>
		</dependency>

		<!-- 3. mybatis-spring -->
		<!-- org.mybatis » mybatis-spring 에서 최신버전카피 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>2.0.6</version>
		</dependency>


		<!-- 4. commons-dbcp -->
		<!-- org.apache.commons » commons-dbcp2에서 최신버전카피 -->
		<!-- DBCP(스프링 풀과 비슷, 데이타베이스와 연결하는 객체 Connection(datasource)저장하는 객체, 커넥션 
			풀) -->
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-dbcp2</artifactId>
			<version>2.8.0</version>
		</dependency>

		<!-- 5.spring-orm -->
		<!-- 자바객체와 rdb연결하는 객체 -->
		<!-- Object-Relational-Mapping -->
		<!-- org.springframework » spring-orm을 가져와서 <version>에 ${org.springframework-version}를 
			써준다 3.1.1버전 쓰는데 무조건 최신 버전 쓰면 beans, core랑 충돌남, 충돌나는 건 Dependency Hierarchy에서 
			확인할 수 있음 -->
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-orm -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>



		<!-- aop 관련 -->
		<!-- 버전에 ${org.aspectj-version}으로 하기 -->

		<!-- aspectjweaver -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>

		<!-- aspectjrt -->
		<!-- 중복되면 버전까지 완벽하게 같다면 써도 되는데 중복으로 쓰지 않는게 좋다 -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>


		<!-- login관련 -->
		<!-- jackson-core-asl -->
		<!-- 4.x버전 : com.fasterxml.jackson.core » jackson-core -->
		<!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-core-asl -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.9.13</version>
		</dependency>

		<!-- jackson-mapper-asl -->
		<!-- 4.x 버전 : com.fasterxml.jackson.core » jackson-databind -->
		<!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.13</version>
		</dependency>


		<!-- spring-security-web -->
		<!-- 권한과 인증을 좀더 편하게 하기 위해서 사용해본 것, spring에서 만든 interceptor와 같다고 생각하기 -->
		<!-- spring-security-web은 3.1.1버전인데 나머지 spring3.0.7버전이라서 버전 충돌나게 됨 /dependency 
			hierarchy 잘봐야함!! -->
		<!-- 1.밑으로 내려서 버전을 맞추던가 2.시큐리티랑 맞는 버전으로 위의 properties의 org.springframework-version과 
			spring dependency의 version도 바꿔야 함 3.것도 아니면 필요한 자르만 가져와서 넣던가 -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>


	</dependencies>

	<!-- ojdbc6 저장소 -->
	<repositories>
		<repository>
			<id>datanucleus</id>
			<url>http://www.datanucleus.org/downloads/maven2/</url>
		</repository>
	</repositories>


	<build>
		<plugins>
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<compilerArgument>-Xlint:all</compilerArgument>
					<showWarnings>true</showWarnings>
					<showDeprecation>true</showDeprecation>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<configuration>
					<mainClass>org.test.int1.Main</mainClass>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
